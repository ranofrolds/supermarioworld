package algoritmos;

import java.util.*;

import grafo.*;
import tree.*;


public class BuscaEmProfundidade {
    int tempo;
    boolean conhecido[];
    Grafo grafo;
    Vertice vertices[];
    boolean arestas[];

    public BuscaEmProfundidade(Grafo G, int n) {
        conhecido = new boolean[n];
        tempo = 0;
        grafo = G;
        vertices=grafo.getVertice();

    }

    public LinkedList<Vertice> BFP(Arvore tree) {
        
        LinkedList<Vertice> topo = new LinkedList<>();
 

        for (Vertice v : grafo.getVertice()) {
            No origem=new No(v.getValor());
            tree.setverticeIncial(origem,origem.getN());
            bfpVisit(v,origem, topo, null, origem.getN());

        }

        Collections.reverse(topo);

        return topo;
    }

    public void bfpVisit(Vertice v, No no, LinkedList<Vertice> topo,Vertice anterior, int origem ) {
        tempo++;
        v.setTempoInicial(tempo);
        v.setCor("cinza");
        LinkedList<Integer> u[] = grafo.getAdj().getListaAdj();
        for (Integer a : u[v.getValor()]) {
            if (conhecido[a] == false && !fimCiclo(v,a,anterior, origem, vertices[a].getCor())) { 
                    
                    grafo.getVertice()[a].setPai(v);
                    No novo = new No(a);
                    no.addFilho(novo);
                    bfpVisit(grafo.getVertice()[a], novo, topo, v, origem);
 
            }
        }
        if(conhecido[v.getValor()]==false){
            topo.add(grafo.getVertice()[v.getValor()]);
            conhecido[v.getValor()] = true;
        }
        
        tempo++;
        v.setTempoFinal(tempo);
    }

    public boolean fimCiclo(Vertice v, int prox, Vertice anterior, int origem, String cor){
        if(anterior==null){
            return false;
        }
        else if(anterior.getValor()==prox){
            return true;
        }
        else if(prox==origem){
            return true;
        }
        else if(cor=="cinza"){
            return true;
        }
            
        return false;

    }

}
